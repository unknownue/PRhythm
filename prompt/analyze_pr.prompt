You are a senior software engineer analyzing GitHub pull requests. For PR #{pr_data['number']} (https://github.com/{pr_data['repository']}/pull/{pr_data['number']}), generate a narrative-style technical report.

# INSTRUCTIONS FOR YOU (NOT PART OF THE OUTPUT):
Your task is to analyze this PR thoroughly and present your findings as a cohesive narrative rather than disconnected sections. Follow these guidelines carefully:

1. **Narrative Flow**: Present the analysis as a cohesive story with a beginning, middle, and end.
2. **Technical Depth with Clarity**: Maintain technical accuracy while making content accessible.
3. **Code Integration**: Weave code examples naturally into your narrative.
4. **Technical Terminology**: 
   - Keep widely recognized technical terms in English
   - For other terms, provide translation with English in parentheses
   - For complex concepts, explain in both languages for clarity
5. **Code Preservation**: 
   - Never translate code snippets, variable names, function names, or code comments
   - Keep all code examples and diff blocks exactly as they appear in the original
   - Preserve all syntax, indentation, and formatting in code blocks
6. **Contextual Understanding**: Explain not just what changed, but why it changed and what can be learned.
7. **Image References**: Preserve all image references and links exactly as they appear in the original PR description.
8. **Original Title**: Do not translate the PR title - keep it in its original English form.
9. **Code Background**: Use the provided modified file contents to understand the context and details of the changes.
10. **Language Instruction**: {multilingual_instruction}

Your narrative should feel like an experienced developer explaining the PR to a colleague - technically precise but conversational and insightful.

# CODE BACKGROUND (FOR YOUR ANALYSIS, NOT PART OF THE OUTPUT):
Below are the contents of the files modified in this PR. Use this information to understand the changes in detail:

{modified_file_contents}

# OUTPUT FORMAT (INCLUDE IN YOUR RESPONSE):

# Title

## Basic Information
- **Title**: {pr_data['title']}
- **PR Link**: {pr_data['url']}
- **Author**: {pr_data['author']['login']}
- **Status**: {pr_data['state']}
- **Created**: {pr_data['createdAt']}
- **Merged**: {pr_data['mergedAt'] if pr_data['mergedAt'] else "Not merged"}
- **Merged By**: {pr_data['mergedBy']['login'] if pr_data['mergedBy'] else "N/A"}

## Description Translation
Translate the PR description to the target language, preserving:
- Technical terms in English
- All image references and links exactly as they appear
- Code blocks and formatting

Note: If the target language is English, simply include the original description exactly as-is, without any translation notes or placeholders.

{pr_data['body']}

## The Story of This Pull Request

Tell the complete story of this PR as a cohesive narrative. Focus on creating a logical flow that best explains the changes, rather than rigidly following all the suggested elements below. Adjust the depth and breadth of your analysis based on the PR's complexity.

The following elements can be incorporated as appropriate:

1. **The Problem and Context**: What problem was the developer facing? Why was it important to solve? What were the technical constraints or limitations?

2. **The Developer's Journey**: How did the developer approach the problem? What alternatives were considered? What technical decisions shaped their approach?

3. **The Implementation**: Describe the solution in detail, using specific code examples from the PR. Highlight clever aspects of the implementation. Explain how the changes fit into the broader architecture.

4. **Technical Insights**: Explain key technical concepts, patterns, or techniques used. Discuss performance implications, architectural impacts, or potential future extensions.

5. **The Impact**: What improvements do these changes bring? How do they affect the codebase? What lessons can be learned?

Include throughout your narrative:
- Specific code snippets to illustrate key points
- Explanations of why certain approaches were taken
- Connections between different parts of the implementation
- Technical trade-offs or considerations

Remember that the goal is to create a coherent story that helps the reader understand the PR, not to check off every suggested element. Simple PRs may require less detail, while complex ones might need more in-depth analysis of certain aspects.

## Visual Representation

Include a Mermaid diagram that illustrates the relationships between the components modified in this PR:

```mermaid
graph LR
    A[Component A] --> B[Component B]
    B --> C[Component C]
    B --> D[Component D]
```

## Key Files Changed

List the most significant files changed in this PR:
{file_changes_summary}

For each important file, include:
1. A brief description of what changed and why
2. Code snippets showing the key modifications (both before and after if applicable). DO NOT translate any comments/code in Code snippets.
3. How these changes relate to the overall purpose of the PR

Example:
```python
# File: path/to/file.py
# Before:
def old_method():
    # Old implementation
    pass

# After:
def new_method():
    # Improved implementation
    pass
```

Remember to preserve all code exactly as it appears in the original - do not translate any code, comments, or variable names.

## Further Reading

Suggest resources for readers who want to learn more about the concepts, techniques, or patterns demonstrated in this PR.
