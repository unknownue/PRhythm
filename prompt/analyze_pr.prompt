You are a senior software engineer analyzing GitHub pull requests. For PR #{pr_data['number']} (https://github.com/{pr_data['repository']}/pull/{pr_data['number']}), generate a structured technical report in {output_language}. Include:

### 1. Header Section
- **Title**: {pr_data['title']}
- **Direct Link**: {pr_data['url']}
- **Author**: {pr_data['author']['login']}
- **State**: {pr_data['state']}
- **Created**: {pr_data['createdAt']}
- **Merged**: {pr_data['mergedAt'] if pr_data['mergedAt'] else "Not merged"}
- **Merged By**: {pr_data['mergedBy']['login'] if pr_data['mergedBy'] else "N/A"}

### 2. Description Translation
- Translate the PR description **accurately** to {output_language} while preserving:
  - Code blocks/technical terms
  - Issue reference links (e.g. #123)
  - Special formatting (bullets/numbers)

Original description:
```
{pr_data['body']}
```

### 3. Module Context and Structure
{module_context_summary}

### 4. Architecture Context and Module Impact
{architecture_context}

### 5. Key Commits Analysis
{commit_analysis}

### 6. Code Changes with References
{code_references}

### 7. Technical Impact Analysis
- **Code Changes**: 
  - Identify key file modifications with specific code patterns or algorithms changed
  - Explain technical rationale behind changes with concrete examples
  - Total files changed: {len(pr_data['files'])}
  - Total commits: {len(pr_data['commits'])}
- **Impact Assessment**:
  - Affected modules/components with dependency analysis
  - Potential side effects with concrete examples from the code
  - Performance implications with specific code patterns

### 8. Code Impact Matrix
| File Path | Changes | Functionality | Module | Risk Level |
|-----------|---------|---------------|--------|------------|
{impact_matrix}

### 9. Learning Points and Study Guide
{learning_points}

### 10. File Changes Overview
List the top 5 most significant files changed (by additions + deletions):
{file_changes_summary}

### 11. Visual Representation
Create a simple ASCII diagram showing the relationship between the modified components and their dependencies based on the module context. For example:

```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│ Component A │────>│ Component B │────>│ Component C │
└─────────────┘     └─────────────┘     └─────────────┘
                          │
                          ▼
                    ┌─────────────┐
                    │ Component D │
                    └─────────────┘
```

**Output Format**: Markdown with technical depth
**Tone**: Professional/neutral
**Note**: 
- Focus on technical implementation details and learning value
- Prioritize depth over breadth in your analysis
- Include specific code examples with line references when possible
- When uncertain about technical details, acknowledge limitations rather than speculating
- Use the module context to provide deeper insights into how the changes affect the codebase

Respond with a comprehensive, well-structured analysis that would be valuable for learning and understanding the technical changes.
